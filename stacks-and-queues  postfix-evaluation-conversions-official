https://www.pepcoding.com/resources/online-java-foundation/stacks-and-queues/postfix-evaluation-conversions-official/ojquestion

import java.io.*;
import java.util.*;

public class Main{
  

public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String exp = br.readLine();

    // code
    Stack<Integer> evaluate=new Stack<>();
    Stack<String> infix=new Stack<>();
    Stack<String> prefix= new Stack<>();
    
    for(int i=0;i<exp.length();i++){
        char ch=exp.charAt(i);
        if(Character.isDigit(ch)){
            int digit= ch-'0';
            evaluate.push(digit);
            infix.push(Character.toString(ch));
            prefix.push(Character.toString(ch));
        }else {
            //evaluation
            int ev2=evaluate.pop();
            int ev1=evaluate.pop();
            char op=ch;
            int result=operation(ev1,ev2,op);
            evaluate.push(result);
            
            //infix
            String infs2=infix.pop();
            String infs1=infix.pop();
            String res= '('+infs1+ op + infs2 +')';
            infix.push(res);
            
            //prefix
            String pres2=prefix.pop();
            String pres1=prefix.pop();
            String res1= op+pres1+pres2;
            prefix.push(res1);
        }
    }
    //evaluation done
    System.out.println(evaluate.peek());
    System.out.println(infix.peek());
    System.out.println(prefix.peek());
}
 
 public static int operation(int v1,int v2,char ch){
     if(ch=='-'){
         return v1-v2;
     }else if(ch=='*'){
         return v1*v2;
     }else if(ch=='/'){
         return v1/v2;
     }else if(ch=='+'){
         return v1+v2;
     }
     return 0;
     
 }
 
 
}
